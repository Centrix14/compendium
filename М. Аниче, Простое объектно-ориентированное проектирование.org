#+title: М. Аниче, Простое объектно-ориентированное проектирование
#+author: Centrix
#+date: <2025-09-07 Вс>
#+startup: overview
* Аннотация
* Конспект
** Глава 1. Управление сложностью
*** 1.1. Объектно-ориентированное проектирование и испытание временем
Все системы постоянно усложняются, это нормально. Самое важное в этом процессе — стремиться к /высокой сопровождаемости/ системы. Сохранение простоты, следование практикам чистого кода и т. п. — всё это не конечные цели, а только инструменты для достижения высокой сопровождаемости.

*** 1.2. Проектирование простых объектно-ориентированных систем
Что же такое сопровождаемость, а точнее, степень сопровождаемости?

Степень сопровождаемости — это величина усилий, которые нам необходимо приложить, чтобы:
1) изменить бизнес-правило,
2) добавить новые возможности,
3) исправить ошибку
4) и т. д.

Проект, у которого высокая степень сопровождаемости — это простой проект. Простота его состоит не в размере (проект может быть очень большим), а в том, насколько легко разобраться в отдельном компоненте, насколько легко внести изменение и проверить, что оно ничего не нарушает.

#+begin_comment
Понимание простоты, как сопровождаемости, будет использоваться далее во всей книге.
#+end_comment

Автор выделяет 6 принципов сохранения простоты (т. е. поддержания сопровождаемости):
1) простота кода,
2) согласованность объектов,
3) грамотность управления зависимостями,
4) высокое качество абстракций,
5) правильность работы с внешней инфраструктурой,
6) продуманная модульность.

Далее в главе даётся краткая характеристика каждого принципа. Детальному раскрытию принципов посвящены главы 2-7.

**** 1.2.1. Простой код
Первым, и самым явным, элементом простого проекта является простой код. Простота кода состоит, в основном, в его физической простоте — грамотном именовании, краткости, выразительности, 

**** 1.2.2. Согласованные объекты
Разработчик — это, в каком-то смысле, бог или творец. И опыт показывает, что мастерство бога — не всемогущество, а очень грамотное и тщательное самоограничение.

Ключ к созданию грамотных самоограничений — это согласованность объектов. Объекты не должны позволять делать с собой всё, что угодно. Они должны находиться лишь в определённом допустимом множестве состояний, выйти за которые несознательно нельзя. Если кто-то пытается ввести объект в состояние, в котором он не может существовать, этого кого-то нужно предупредить, а действие заблокировать.

#+begin_comment
Аниче приводит здесь пример с корзиной. Он говорит, что корзина должна управлять своим состоянием и не позволять, например, удалять из себя несуществующие товары. Это грамотная мысль.

Мне кажется, её можно развить: корзина не должна сама по себе управлять своим состоянием. Корзина — это хранилище, только хранилище и ничего более. А вот правила управления корзиной — это уже иная сущность. Управление корзиной стоит поручить отдельному классу — менеджеру корзины.

При таком подходе в проекте параллельно и непротиворечиво могут существовать несколько различных менеджеров корзины, которые реализуют различные правила.
#+end_comment

**** 1.2.3. Качественное управление зависимостями
В объекто-ориентированной системы классы будут неизбежно связываться друг с другом. Важно держать эти связи под контролем, в определённых условиями границах. Неграмотные зависимости могут порождать множество проблем: изменение одного класса ведёт к изменению другого, ошибка в одном месте порождает каскадный обвал во всей системе.

Поэтому классы (как и любые единицы проекта вообще) должны знать друг о друге как можно меньше.

**** 1.2.4. Хорошие абстракции
Абстракции необходимо проектировать с учётом дальнейшего расширения. Расширение должно быть стандартной, простой процедурой, выполнение которой никак не затрагивает существующий код.

**** 1.2.5. Правильная работа с внешними зависимостями и инфраструктурой
Инфраструктура — это всё, что находится за пределами нашей системы и требуется для её работы. Не смотря на то, что связь между системой и инфраструктурой очень высока, инфраструктура может со временем изменяться; на систему эти изменения влиять не должны.

Чтобы добиться гибкости в работе с инфраструктурой нужно отделять доменный слой от инфраструктурного слоя.

#+begin_comment
По-сути это требование напрямую исходит из качественного управления зависимостями. Единственное отличие между этими принципами состоит в том, что принцип разделения домена и архитектуры фокусируется на внешнем взаимодействии системы, на сохранении системы, как целого, в системе высшего порядка.
#+end_comment

**** 1.2.6. Продуманная модульность
Между принципом № 3 (управление зависимостями) и принципом №5 (разделение домена и инфраструктуры) стоит принцип № 6: принцип продуманной модульности.

Простую систему недостаточно разделить на классы, недостаточно отделить доменную логику от инфраструктурной. Необходимо так же грамотно разделять систему на внутренне связные целые — модули. Модули должны представлять собой чёрные ящики, которые знают друг о друге не дальше интерфейса.

Решение задачи приложения в таком случае сводится к правильной /координации/ модулей.

#+begin_comment
Акцент на слове «координация» важен потому, что модули должны быть совершенно независимы, их взаимодействие нужно координировать, организовать, как дирижёр помогает музыканту понять своё место в оркестре.
#+end_comment
